{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramya\\\\flashcard-fullstack\\\\client\\\\src\\\\pages\\\\InputPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './InputPage.css'; // ✅ import CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputPage = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) return setMessage('❌ Please select a PDF file.');\n    const formData = new FormData();\n    formData.append('pdf', file);\n    const userId = localStorage.getItem('userId') || '';\n    formData.append('userId', userId);\n    try {\n      const res = await fetch('http://localhost:5000/api/flashcards/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await res.json();\n      if (!(data !== null && data !== void 0 && data.flashcards) || !Array.isArray(data.flashcards)) {\n        setMessage('❌ Failed to generate flashcards');\n        return;\n      }\n\n      // ✅ Clear old flashcards before saving new set\n      localStorage.removeItem('flashcards');\n      localStorage.setItem('flashcards', JSON.stringify(data.flashcards));\n      setMessage(`✅ New flashcards generated: ${data.flashcards.length}`);\n\n      // ✅ Redirect to Review Page\n      setTimeout(() => navigate('/review'), 1000);\n    } catch (err) {\n      console.error(err);\n      setMessage('❌ Upload failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload PDF to Generate Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".pdf\",\n        onChange: e => setFile(e.target.files[0] || null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"upload-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(InputPage, \"v0oKl/jYieflqO3kZf91Q46sE4Y=\", false, function () {\n  return [useNavigate];\n});\n_c = InputPage;\nexport default InputPage;\nvar _c;\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","InputPage","_s","file","setFile","message","setMessage","navigate","handleUpload","e","preventDefault","formData","FormData","append","userId","localStorage","getItem","res","fetch","method","body","data","json","flashcards","Array","isArray","removeItem","setItem","JSON","stringify","length","setTimeout","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","accept","onChange","target","files","_c","$RefreshReg$"],"sources":["C:/Users/Ramya/flashcard-fullstack/client/src/pages/InputPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './InputPage.css';  // ✅ import CSS\r\n\r\nconst InputPage = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n    if (!file) return setMessage('❌ Please select a PDF file.');\r\n\r\n    const formData = new FormData();\r\n    formData.append('pdf', file);\r\n\r\n    const userId = localStorage.getItem('userId') || '';\r\n    formData.append('userId', userId);\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/flashcards/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      const data = await res.json();\r\n\r\n      if (!data?.flashcards || !Array.isArray(data.flashcards)) {\r\n        setMessage('❌ Failed to generate flashcards');\r\n        return;\r\n      }\r\n\r\n      // ✅ Clear old flashcards before saving new set\r\n      localStorage.removeItem('flashcards');\r\n      localStorage.setItem('flashcards', JSON.stringify(data.flashcards));\r\n\r\n      setMessage(`✅ New flashcards generated: ${data.flashcards.length}`);\r\n\r\n      // ✅ Redirect to Review Page\r\n      setTimeout(() => navigate('/review'), 1000);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setMessage('❌ Upload failed');\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"input-container\">\r\n      <h2>Upload PDF to Generate Flashcards</h2>\r\n      <form onSubmit={handleUpload} className=\"input-form\">\r\n        <input\r\n          type=\"file\"\r\n          accept=\".pdf\"\r\n          onChange={(e) => setFile(e.target.files[0] || null)}\r\n        />\r\n        <button type=\"submit\">Upload</button>\r\n      </form>\r\n      <p className=\"upload-message\">{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}