{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramya\\\\flashcard-fullstack\\\\client\\\\src\\\\pages\\\\InputPage.jsx\",\n  _s = $RefreshSig$();\n// client/src/pages/InputPage.jsx\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputPage = () => {\n  _s();\n  const [pdfText, setPdfText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleUpload = async () => {\n    setLoading(true);\n    try {\n      // Here you’d normally extract text from PDF → but now we use pdfText directly\n      const response = await fetch(\"http://localhost:5000/api/flashcards/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: `Set-${Date.now()}`,\n          flashcards: [\n          // demo – in real use, call backend/AI to generate flashcards\n          {\n            question: \"What is ChatGPT?\",\n            answer: \"AI tool (keyword)\",\n            marks: 1\n          }, {\n            question: \"Explain supervised learning.\",\n            answer: \"Small explanation...\",\n            marks: 2\n          }, {\n            question: \"Features of ML?\",\n            answer: \"8–10 lines...\",\n            marks: 5\n          }, {\n            question: \"Impact of AI?\",\n            answer: \"Essay 15+ lines...\",\n            marks: 10\n          }]\n        })\n      });\n      const data = await response.json();\n      alert(\"Flashcards uploaded successfully!\");\n      console.log(\"Saved set:\", data);\n    } catch (err) {\n      console.error(err);\n      alert(\"Error uploading flashcards\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold\",\n      children: \"Upload PDF (Demo with text input)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: pdfText,\n      onChange: e => setPdfText(e.target.value),\n      placeholder: \"Paste extracted text here...\",\n      className: \"w-full p-2 border rounded mt-2\",\n      rows: 6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading,\n      className: \"bg-blue-500 text-white px-4 py-2 rounded mt-3\",\n      children: loading ? \"Uploading...\" : \"Upload & Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(InputPage, \"Ch68WKmN7L3mBt+wezYygkWbHA0=\");\n_c = InputPage;\nexport default InputPage;\nvar _c;\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InputPage","_s","pdfText","setPdfText","loading","setLoading","handleUpload","response","fetch","method","headers","body","JSON","stringify","name","Date","now","flashcards","question","answer","marks","data","json","alert","console","log","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Ramya/flashcard-fullstack/client/src/pages/InputPage.jsx"],"sourcesContent":["// client/src/pages/InputPage.jsx\r\nimport React, { useState } from \"react\";\r\n\r\nconst InputPage = () => {\r\n  const [pdfText, setPdfText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleUpload = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Here you’d normally extract text from PDF → but now we use pdfText directly\r\n      const response = await fetch(\"http://localhost:5000/api/flashcards/upload\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          name: `Set-${Date.now()}`,\r\n          flashcards: [\r\n            // demo – in real use, call backend/AI to generate flashcards\r\n            { question: \"What is ChatGPT?\", answer: \"AI tool (keyword)\", marks: 1 },\r\n            { question: \"Explain supervised learning.\", answer: \"Small explanation...\", marks: 2 },\r\n            { question: \"Features of ML?\", answer: \"8–10 lines...\", marks: 5 },\r\n            { question: \"Impact of AI?\", answer: \"Essay 15+ lines...\", marks: 10 }\r\n          ]\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      alert(\"Flashcards uploaded successfully!\");\r\n      console.log(\"Saved set:\", data);\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Error uploading flashcards\");\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-xl font-bold\">Upload PDF (Demo with text input)</h2>\r\n      <textarea\r\n        value={pdfText}\r\n        onChange={(e) => setPdfText(e.target.value)}\r\n        placeholder=\"Paste extracted text here...\"\r\n        className=\"w-full p-2 border rounded mt-2\"\r\n        rows={6}\r\n      />\r\n      <button\r\n        onClick={handleUpload}\r\n        disabled={loading}\r\n        className=\"bg-blue-500 text-white px-4 py-2 rounded mt-3\"\r\n      >\r\n        {loading ? \"Uploading...\" : \"Upload & Generate\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputPage;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BD,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,IAAI,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACzBC,UAAU,EAAE;UACV;UACA;YAAEC,QAAQ,EAAE,kBAAkB;YAAEC,MAAM,EAAE,mBAAmB;YAAEC,KAAK,EAAE;UAAE,CAAC,EACvE;YAAEF,QAAQ,EAAE,8BAA8B;YAAEC,MAAM,EAAE,sBAAsB;YAAEC,KAAK,EAAE;UAAE,CAAC,EACtF;YAAEF,QAAQ,EAAE,iBAAiB;YAAEC,MAAM,EAAE,eAAe;YAAEC,KAAK,EAAE;UAAE,CAAC,EAClE;YAAEF,QAAQ,EAAE,eAAe;YAAEC,MAAM,EAAE,oBAAoB;YAAEC,KAAK,EAAE;UAAG,CAAC;QAE1E,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;MAClCC,KAAK,CAAC,mCAAmC,CAAC;MAC1CC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,IAAI,CAAC;IAEjC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;MAClBH,KAAK,CAAC,4BAA4B,CAAC;IACrC;IAEAlB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACEN,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB9B,OAAA;MAAI6B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAC;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxElC,OAAA;MACEmC,KAAK,EAAEhC,OAAQ;MACfiC,QAAQ,EAAGC,CAAC,IAAKjC,UAAU,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC,8BAA8B;MAC1CV,SAAS,EAAC,gCAAgC;MAC1CW,IAAI,EAAE;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACFlC,OAAA;MACEyC,OAAO,EAAElC,YAAa;MACtBmC,QAAQ,EAAErC,OAAQ;MAClBwB,SAAS,EAAC,+CAA+C;MAAAC,QAAA,EAExDzB,OAAO,GAAG,cAAc,GAAG;IAAmB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChC,EAAA,CAvDID,SAAS;AAAA0C,EAAA,GAAT1C,SAAS;AAyDf,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}