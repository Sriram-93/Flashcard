{"ast":null,"code":"// src/serviceWorkerRegistration.js\n\n// This code registers the service worker generated by CRA build\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n    if (isLocalhost) {\n      // Running on localhost → check service worker\n      checkValidServiceWorker(swUrl, config);\n    } else {\n      // Register service worker directly\n      registerValidSW(swUrl, config);\n    }\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker) {\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content available, refresh app.');\n            } else {\n              console.log('Content cached for offline use.');\n            }\n          }\n        };\n      }\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl).then(response => {\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","swUrl","PUBLIC_URL","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","reload"],"sources":["C:/Users/Ramya/flashcard-fullstack/client/src/serviceWorkerRegistration.js"],"sourcesContent":["// src/serviceWorkerRegistration.js\r\n\r\n// This code registers the service worker generated by CRA build\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n    if (isLocalhost) {\r\n      // Running on localhost → check service worker\r\n      checkValidServiceWorker(swUrl, config);\r\n    } else {\r\n      // Register service worker directly\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                console.log('New content available, refresh app.');\r\n              } else {\r\n                console.log('Content cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,WAAW,GAAGC,OAAO,CACzBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IACtCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,IACpCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAC5B,wDACF,CACJ,CAAC;AAED,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC/B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,eAAe,IAAIC,SAAS,EAAE;IACzE,MAAMC,KAAK,GAAG,GAAGJ,OAAO,CAACC,GAAG,CAACI,UAAU,oBAAoB;IAE3D,IAAIb,WAAW,EAAE;MACf;MACAc,uBAAuB,CAACF,KAAK,EAAEL,MAAM,CAAC;IACxC,CAAC,MAAM;MACL;MACAQ,eAAe,CAACH,KAAK,EAAEL,MAAM,CAAC;IAChC;EACF;AACF;AAEA,SAASQ,eAAeA,CAACH,KAAK,EAAEL,MAAM,EAAE;EACtCI,SAAS,CAACK,aAAa,CACpBV,QAAQ,CAACM,KAAK,CAAC,CACfK,IAAI,CAAEC,YAAY,IAAK;IACtBA,YAAY,CAACC,aAAa,GAAG,MAAM;MACjC,MAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAU;MAChD,IAAID,gBAAgB,EAAE;QACpBA,gBAAgB,CAACE,aAAa,GAAG,MAAM;UACrC,IAAIF,gBAAgB,CAACG,KAAK,KAAK,WAAW,EAAE;YAC1C,IAAIZ,SAAS,CAACK,aAAa,CAACQ,UAAU,EAAE;cACtCC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;YACpD,CAAC,MAAM;cACLD,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;YAChD;UACF;QACF,CAAC;MACH;IACF,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IAChBH,OAAO,CAACG,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;EACnE,CAAC,CAAC;AACN;AAEA,SAASd,uBAAuBA,CAACF,KAAK,EAAEL,MAAM,EAAE;EAC9CsB,KAAK,CAACjB,KAAK,CAAC,CACTK,IAAI,CAAEa,QAAQ,IAAK;IAClB,IACEA,QAAQ,CAACC,MAAM,KAAK,GAAG,IACvBD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EACjE;MACAvB,SAAS,CAACK,aAAa,CAACmB,KAAK,CAAClB,IAAI,CAAEC,YAAY,IAAK;QACnDA,YAAY,CAACkB,UAAU,CAAC,CAAC,CAACnB,IAAI,CAAC,MAAM;UACnCf,MAAM,CAACC,QAAQ,CAACkC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACLtB,eAAe,CAACH,KAAK,EAAEL,MAAM,CAAC;IAChC;EACF,CAAC,CAAC,CACDoB,KAAK,CAAC,MAAM;IACXF,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;EACxE,CAAC,CAAC;AACN;AAEA,OAAO,SAASU,UAAUA,CAAA,EAAG;EAC3B,IAAI,eAAe,IAAIzB,SAAS,EAAE;IAChCA,SAAS,CAACK,aAAa,CAACmB,KAAK,CAAClB,IAAI,CAAEC,YAAY,IAAK;MACnDA,YAAY,CAACkB,UAAU,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}